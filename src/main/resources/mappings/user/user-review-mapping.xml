<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="userReviewDAO">

	<resultMap type="com.web.bomulsum.user.review.repository.UserReviewVO" id="reviewListMap">
		<result column="member_name" property="memberName"/>
		<result column="member_profile" property="memberProfile"/>
		
		<result column="buy_art_code_seq" property="buyArtCodeSeq"/>
		<result column="B_ART_CODE_SEQ" property="bArtCodeSeq"/>
		<result column="B_ART_NAME" property="bArtName"/>
		<result column="B_WRITER_CODE_SEQ" property="bWriterCodeSeq"/>
		<result column="B_ART_OPTION_CATEGORY" property="bArtOptionCategory"/>
		<result column="B_ART_OPTION_NAME" property="bArtOptionName"/>
		<result column="B_ART_OPTION_PRICE" property="bArtOptionPrice"/>
		<result column="B_ART_OPTION_COUNT" property="bArtOptionCount"/>
		<result column="B_ART_REVIEW_STATUS" property="bArtReviewStatus"/>
		<result column="B_ART_REVIEW" property="bArtReview"/>
		
		<result column="art_photo" property="artPhoto"/>
		<result column="art_description" property="artDescription"/>
		
		<result column="writer_name" property="writerName"/>
		
		<result column="order_date" property="orderDate"/>
		
		<result column="review_code_seq" property="reviewCodeSeq" />
		<result column="review_date" property="reviewDate" />
		<result column="review_star" property="reviewStar" />
		<result column="review_comment" property="reviewComment" />
		<result column="art_name" property="artName" />
		<result column="writer_code_seq" property="writerCodeSeq" />
		<result column="member_name" property="memberName" />
		<result column="member_profile" property="memberProfile" />
		<result column="review_photo" property="reviewPhoto" />
		
		<result column="grnum" property="gRnum"/>
		<result column="datenum" property="dateNum"/>
		
	</resultMap>

	<sql id="header">
		SELECT Y.*
		FROM (
			SELECT ROWNUM AS RNUM, X.*
			FROM (
	</sql>
	<sql id="footer">
		) X ) Y
		WHERE Y.RNUM BETWEEN #{startNum} AND #{endNum}
		<!-- <if test="orderColumn != null and orderValue != null"> -->
		<!-- </if> -->
	</sql>


	<!-- 페이징을 위한 구매후기 쓸 수 있는 구매 상품 목록 개수 구하기 -->
	<select id="getReviewCount" parameterType="String" resultType="int">
		SELECT
			COUNT(*)
		FROM
			buy_art_tb
		WHERE
			(
			b_art_review = 'N' AND member_code_seq = #{memberSeq}
			)
	</select>
	
	<!-- 구매후기 쓸 수 있는 구매 상품 목록 불러오기 -->
	<select id="reviewList" resultMap="reviewListMap">
		<include refid="header" />
			SELECT
				a.buy_art_code_seq, a.member_code_seq, a.B_ART_CODE_SEQ,
				a.B_ART_NAME, a.B_WRITER_CODE_SEQ, a.B_ART_OPTION_CATEGORY,
				a.B_ART_OPTION_NAME, a.B_ART_OPTION_PRICE, a.B_ART_OPTION_COUNT,
				a.B_ART_REVIEW_STATUS, a.B_ART_REVIEW, b.art_photo, b.art_description,
				c.writer_name, d.order_date, e.review_code_seq, e.review_comment, e.review_star, e.review_photo
			FROM buy_art_tb a
			LEFT OUTER JOIN
				art_tb b ON a.b_art_code_seq = b.art_code_seq
			LEFT OUTER JOIN
				writer_tb c ON b.writer_code_seq = c.writer_code_seq
			LEFT OUTER JOIN
				order_tb d ON a.order_code_seq = d.order_code_seq
			LEFT OUTER JOIN
				review_tb e ON a.buy_art_code_seq = e.buy_art_code_seq
			WHERE a.b_art_review = 'N' AND a.member_code_seq = #{memberSeq}
			ORDER BY d.order_date DESC
		<include refid="footer" />
	</select>
	
	<!-- 페이징을 위한 작성된 구매 후기 목록 개수 구하기 -->
	<select id="getReviewedCount" parameterType="String" resultType="int">
		SELECT
			COUNT(*)
		FROM
			review_tb
		WHERE
			(
			member_code_seq = #{memberSeq}
			)
	</select>
	<!-- 작성한 구매후기 목록 불러오기 -->
	<!-- 작품 테이블에서 작품 이름, 작품 사진, 맴버 테이블에서 맴버 사진, 맴버 이름, 구매후기 테이블에서 별점, 날짜, 내용 불러와야됨 -->
	<select id="reviewedList" resultMap="reviewListMap">
		<include refid="header" />
				SELECT
					a.review_code_seq, a.review_date, a.review_star, a.review_comment,
					b.art_photo, b.art_name, b.writer_code_seq,
					c.member_name, c.member_profile,
					d.b_art_review_status, d.b_art_review
				FROM
					review_tb a
				LEFT OUTER JOIN
					art_tb b ON a.art_code_seq = b.art_code_seq
				LEFT OUTER JOIN
					member_tb c ON a.member_code_seq = c.member_code_seq
				LEFT OUTER JOIN
					buy_art_tb d ON a.buy_art_code_seq = d.buy_art_code_seq
				WHERE
					a.member_code_seq = #{memberSeq}
				ORDER BY a.review_date DESC
		<include refid="footer" />
	</select>

	<!-- 구매후기 등록 -->
	<insert id="reviewReg" parameterType="com.web.bomulsum.user.review.repository.UserReviewVO">
		INSERT INTO review_tb
		(
			review_code_seq,
			buy_art_code_seq,
			member_code_seq,
			art_code_seq,
			review_comment,
            review_star,
            review_photo
		)
		VALUES
		(
			'review_code_seq' || TO_CHAR(review_sq.nextval),
			#{buyArtCodeSeq},
			#{memberCodeSeq},
			#{artCodeSeq},
			#{reviewComment},
            #{reviewStar},
            #{reviewPhoto}
		)
	</insert>
	<!-- 구매후기 수정 -->
	<update id="updateReview" parameterType="com.web.bomulsum.user.review.repository.UserReviewVO">
		UPDATE
			review_tb
		SET
			review_comment = #{reviewComment},
			review_star = #{reviewStar}
		WHERE
			review_code_seq = #{reviewCodeSeq}
	</update>
	
	
	<!-- 구매작품 테이블 후기 상태 수정 -->
	<update id="updateBuyArtTb" parameterType="com.web.bomulsum.user.review.repository.UserReviewVO">
		UPDATE
			buy_art_tb
		SET
			b_art_review_status = 'Y'
		WHERE
			buy_art_code_seq = #{buyArtCodeSeq}
	</update>
	<update id="updateBuyArtTb2" parameterType="com.web.bomulsum.user.review.repository.UserReviewVO">
		UPDATE
			buy_art_tb
		SET
			b_art_review = 'Y'
		WHERE
			buy_art_code_seq = #{buyArtCodeSeq}
	</update>

	<!-- 작가 한테 알람 쏴주기 -->
	<insert id="insertAlarmTb" parameterType="com.web.bomulsum.user.review.repository.UserReviewVO">
		INSERT INTO alarm_tb
		(
			alarm_seq,
			sender_code,
			recipient_code,
			alarm_title,
			alarm_content
		)
		VALUES
		(
			'alarm_seq' || TO_CHAR(alarm_sq.nextval),
			#{writerCodeSeq},
			#{memberCodeSeq},
			'구매후기',
			#{alarmContent}
		)
	</insert>

	<!-- 실시간 구매 후기 -->
	<select id="realtimeReview" resultMap="reviewListMap">
	<include refid="header" />
		SELECT
		    g.art_code_seq, g.art_photo, g.art_name, g.writer_name,
		    LISTAGG(g.review_star, '|-%-|') WITHIN GROUP (order by g.datenum) AS review_star,
		    LISTAGG(g.review_comment, '|-%-|') WITHIN GROUP (order by g.datenum) AS review_comment,
		    LISTAGG(g.member_name, '|-%-|') WITHIN GROUP (order by g.datenum) AS member_name,
		    LISTAGG(g.datenum, '|-%-|') WITHIN GROUP (order by g.datenum) AS datenum,
		    LISTAGG(g.grnum, '|-%-|') WITHIN GROUP (order by g.datenum) AS grnum
		FROM
		    (
		        SELECT
		           f.* 
		        FROM
		        (
		            SELECT
		                a.art_code_seq, a.art_photo, a.art_name, b.writer_name,
		                c.review_star, c.review_comment, c.review_date,
		                d.member_name, RANK() OVER(order by c.review_date DESC) AS datenum,
		                ROW_NUMBER() OVER(PARTITION BY a.art_code_seq ORDER BY a.art_code_seq, c.review_date DESC) AS grnum
		            FROM
		                art_tb a
		            LEFT OUTER JOIN
		                writer_tb b ON a.writer_code_seq = b.writer_code_seq
		            LEFT OUTER JOIN
		                review_tb c ON a.art_code_seq = c.art_code_seq
		            LEFT OUTER JOIN
		                member_tb d ON c.member_code_seq = d.member_code_seq
		            LEFT OUTER JOIN
		                buy_art_tb e ON c.buy_art_code_seq = e.buy_art_code_seq
		            WHERE e.b_art_review_status = 'Y'
		        ) f
		        WHERE f.grnum between 1 and 3
		    ) g
		GROUP BY g.art_code_seq, g.art_photo, g.art_name, g.writer_name
		ORDER BY datenum
	<include refid="footer" />
	</select>
	
	<!-- 페이징을 위한 작품별 구매 후기 목록 개수 구하기 -->
	<select id="getRealTimeReviewCount" resultType="int">
		SELECT
		    COUNT(*)
		FROM
		    (
		    SELECT
		        art_code_seq
		    FROM
		        review_tb
		    GROUP BY art_code_seq
		    )
	</select>
	
	<!-- 구매목록 불러오기 -->
 	<!-- <select id="" parameterType="String" resultMap="">
 		SELECT * FROM buy_art_tb
 		WHERE 
 			(member_code_seq = #{memberCodeSeq})
 			AND (b_art_review = 'N')
	</select>
 -->
	<!-- 구매후기 등록하기 -->
	<!-- <insert id="" parameterType="">
	</insert> -->

</mapper>